<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描相关注解 -->
    <context:component-scan base-package="com.zlm.service"></context:component-scan>

    <!-- 1 druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/carsys" />
        <property name="username" value="root" />
        <property name="password" value="root" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="testWhileIdle" value="true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

    </bean>

    <!-- 2 创建Mybatis的工厂对象 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置数据库连接池 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 加载mybatis主配置文件  classpath 表示classes目录所在路径 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 加载映射文件 -->
        <property name="mapperLocations" value="classpath:com/zlm/mapper/*.xml"/>
    </bean>

    <!--3设置Mybatis的映射接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 设置映射接口所在包 -->
        <property name="basePackage" value="com.zlm.dao"></property>
    </bean>

    <!--spring事务-->
    <!--1.配置一下事务管理类-->
    <bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManage">

        <tx:attributes>
            <!--针对切点对应的方法 就是咱们的目标对象
            在service中的方法的名字，这个名字以后一定要对应下面name属性，如果想要加事务的话
            read-only = true  只读  针对于查询的
            propagation  传播特性 REQUIRED
               SUPPORTS Z只是针对于查询
            -->
            <tx:method name="add*" read-only="false" propagation="REQUIRED" />

            <tx:method name="delete*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="select*" read-only="true" propagation="SUPPORTS"></tx:method>
            <tx:method name="login*" read-only="true" propagation="SUPPORTS"></tx:method>
            <!--没有满足上面的方法的名字的时候，是不支持事务的-->
            <tx:method name="*" propagation="NOT_SUPPORTED"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--3.AOP的配置-->
    <!--切入点 针对于业务层-->
    <aop:config>

        <aop:pointcut id="pc" expression="execution(* com.zlm.service.impl.*.*(..))"/>
        <!--切面类  logAop   针对于事务不需要写切面类，因为spring中已经加了事务的切面类-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"></aop:advisor>

    </aop:config>


</beans>